{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","toDos","setToDos","toDo","setToDo","removedToDos","setRemovedToDos","length","className","type","value","placeholder","onChange","e","target","onClick","id","Date","now","date","toLocaleString","text","status","map","obj","name","console","log","filter","obj2","checked","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAqJeA,MAjJf,WACI,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAEA,EAAwCJ,mBAAS,IAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAGA,OADaD,EAAaE,OAEtB,sBAAKC,UAAU,MAAf,UACI,qBAAKA,UAAU,cAAf,SACI,6CAEJ,sBAAKA,UAAU,aAAf,UACI,uBACA,+EAEJ,sBAAKA,UAAU,QAAf,UACI,uBAAOC,KAAK,OAAOC,MAAOP,EAAMQ,YAAY,iCACxCC,SAAU,SAACC,GAAD,OACNT,EAAQS,EAAEC,OAAOJ,UAGzB,mBAAGF,UAAU,cAAcO,QAAS,WAE1Bb,EAAS,GAAD,mBACAD,GADA,CACO,CAAEe,GAAIC,KAAKC,MAAMC,KAAMF,OAAOG,iBAAkBC,KAAMlB,EAAMmB,QAAQ,MAEnFlB,EAAQ,UAKtB,qBAAKI,UAAU,QAAf,SACKP,EAAMsB,KAAI,SAACC,GACR,OACI,sBAAKhB,UAAU,OAAf,UACI,sBAAKA,UAAU,OAAf,UACI,uBAAOE,MAAOc,EAAIF,OAASb,KAAK,WAAWgB,KAAK,GAAGT,GAAG,GAClDJ,SAAU,SAACC,GACPa,QAAQC,IAAId,EAAEC,OAAOJ,OACrBgB,QAAQC,IAAIH,GACZtB,EACID,EAAM2B,QAAO,SAACC,GAIV,OAHIA,EAAKb,KAAOQ,EAAIR,KAChBa,EAAKP,OAAST,EAAEC,OAAOgB,SAEpBD,SAKvB,4BAAIL,EAAIH,UAEZ,qBAAKb,UAAU,QAAf,SACI,mBACIO,QAAS,WACLT,GAAgB,SAACD,GAAD,4BAAsBA,GAAtB,CAAoCmB,OACpDtB,EACID,EAAM2B,QAAO,SAACC,GACV,OAAIA,EAAKb,KAAOQ,EAAIR,GACTQ,EAEJ,UAInBhB,UAAU,2BAyBlC,sBAAKQ,GAAG,YAAR,UACE,sBAAKA,GAAG,OAAR,yBAGEf,EAAMsB,KAAI,SAACC,GACT,OACE,8BACI,6BAAKA,EAAIH,eAOnB,sBAAKL,GAAG,QAAR,0BACCf,EAAMsB,KAAI,SAACC,EAAKO,GACX,OAAIP,EAAIF,OAEF,8BACE,6BAAKE,EAAIH,SAIV,WAIb,sBAAKL,GAAG,SAAR,0BAEEX,EAAakB,KAAI,SAACC,GAChB,OACE,8BACI,6BAAKA,EAAIH,sBCnHlBW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a0984533.chunk.js","sourcesContent":["//import logo from './logo.svg';\nimport \"./App.css\";\nimport { useState } from \"react\";\n\nfunction App() {\n    const [toDos, setToDos] = useState([]); //empty array for storing todos\n    const [toDo, setToDo] = useState(\"\"); //empty string for storing todo\n\n    const [removedToDos, setRemovedToDos] = useState([]);\n\n    var length = removedToDos.length;\n    return (\n        <div className=\"app\">\n            <div className=\"mainHeading\">\n                <h1>ToDo List</h1>\n            </div>\n            <div className=\"subHeading\">\n                <br />\n                <h2>Whoop, it's Wednesday üåù ‚òï </h2>\n            </div>\n            <div className=\"input\">\n                <input type=\"text\" value={toDo} placeholder=\"üñäÔ∏è Add item...\"                 \n                    onChange={(e) => \n                        setToDo(e.target.value)   \n                    }                    \n                />\n                <i className=\"fas fa-plus\" onClick={() => \n                        {\n                          setToDos(\n                              [...toDos, { id: Date.now(),date: Date().toLocaleString(), text: toDo, status: false }]\n                            )\n                          setToDo(\"\")\n                        }\n                      }                   \n                ></i>\n            </div>\n            <div className=\"todos\">\n                {toDos.map((obj) => {\n                    return (\n                        <div className=\"todo\">\n                            <div className=\"left\">\n                                <input value={obj.status}  type=\"checkbox\" name=\"\" id=\"\" \n                                    onChange={(e) => {\n                                        console.log(e.target.value);\n                                        console.log(obj);\n                                        setToDos(\n                                            toDos.filter((obj2) => {\n                                                if (obj2.id === obj.id) {\n                                                    obj2.status = e.target.checked;\n                                                }\n                                                return obj2;\n                                            })\n                                        );\n                                    }}\n                                />\n                                <p>{obj.text}</p>\n                            </div>\n                            <div className=\"right\">\n                                <i\n                                    onClick={() => {\n                                        setRemovedToDos((removedToDos) => [...removedToDos, obj]);\n                                        setToDos(\n                                            toDos.filter((obj2) => {\n                                                if (obj2.id !== obj.id) {\n                                                    return obj;\n                                                }\n                                                return null;\n                                            })\n                                        );\n                                    }}\n                                    className=\"fas fa-times\"\n                                ></i>\n                            </div>\n                        </div>\n                    );\n                })}\n\n                {/* {toDos.map((obj, index) => {\n                    if (obj.status) {\n                        return (\n                          <div>                            \n                            <h1>{obj.text}</h1>\n                          </div>\n                        )\n                    }\n                    return null;\n                })} */}\n\n                \n            </div>\n             \n\n            \n\n\n            <div id=\"container\">\n              <div id=\"left\">\n                Active Items\n                {\n                toDos.map((obj) => {\n                  return (\n                    <div>                      \n                        <h3>{obj.text}</h3>\n                    </div>\n                  );\n                })\n              }\n\n              </div>\n              <div id=\"right\">Checked Items\n              {toDos.map((obj, index) => {\n                    if (obj.status) {\n                        return (\n                          <div>                            \n                            <h3>{obj.text}</h3>\n                          </div>\n                        )\n                    }\n                    return null;\n                })}\n                \n              </div>\n              <div id=\"center\">Removed Items\n              {\n                removedToDos.map((obj) => {\n                  return (\n                    <div>                      \n                        <h3>{obj.text}</h3>\n                    </div>\n                  );\n                })\n              }\n              </div>\n          </div>\n           \n            {/* {\n                removedToDos.map((obj) => {\n                  return (\n                    <div>\n                      \n                        <h2>{obj.text}</h2>\n                    </div>\n                );\n              })\n            } */}\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}